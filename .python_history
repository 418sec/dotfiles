exit()
import cv2
cv2.__version__
import numpy
numpy.__version__
import matplotlib
matplotlib.__version__
exit()
import cv2
cv2.__version__
import numpy 
numpy.__version
numpy.__version__
import matplotlib 
matplotlib.__version__
exit()
print("0"*0)
print("0"*0 + "zeeshan")
len("11111111")
exit()
print(img.shape)
exit()
print(img.shape)
exit()
print(img.shape)
exit()
print('\"03\" using asterisks')
exit()
maze_array.append(tempEncodedCell)
exit()
inf == inf
a = inf
import math
a = math.inf
b = math.inf
a == b
exit()
a = [1, 'a']
b = [2, 'b']
a + b
exit()
rep = 10
i = 0
while(i < 10):
yield from '|/-\\'
	yield from '|/-\\'
while(i < 10):
	yield from '|/-\\'
	i = i + 1
def spinning_cursor() -> Any:
            while True:
                yield from '|/-\\'
        spinner = spinning_cursor()
def spinning_cursor():
	while(i < 10):
		yield from '|/-\\'
		i = i + 1
spinner = spinning_cursor()
print(spinner)
spinner
while True:
	n = next(spinner)
	print(n)
i=0
def spinning_cursor():
	while(i < 10):
		yield from '|/-\\'
		i = i + 1
spinner = spinning_cursor()
while True:
	n = next(spinner)
	print(n)
def spinning_cursor():
	i=0
	while(i < 10):
		yield from '|/-\\'
		i = i + 1
spinner = spinning_cursor()
while True:
	n = next(spinner)
	print(n)
exit()
a = 'Zeeshan'+'good'
a
b='is'
a='Zeeshan'+b+'good'
a
exit()
import math
math.floor(-0.9)
exit()
a = `Zeeshan`
a = 'Zeeshan'
print(a)
exit()
from urllib.parse import quote
print(quote('print%'))
print(quote('print%')).replace(/\./g, "%2E")
print(quote('print%')).replace("/\./g", "%2E")
print(quote('print%').type())
print(type(quote('print%')))
print(quote('print%').replace("/\./g", "%2E"))
mapping = [{'id': 17719, 'email': 'user17719@chat.zulip.org', 'full_name': 'Zeeshan Equbal', 'is_mirror_dummy': False}, {'email': 'welcome-bot@zulip.com', 'full_name': 'Welcome Bot', 'id': 4, 'is_mirror_dummy': False}]
user_ids = map(lambda x: x['id'], mapping)
user_ids
print(user_ids)
list(user_ids)
user_ids = list(user_ids)
user_ids
list(user_ids)
user_ids = map(lambda x: x['id'], mapping)
user_ids
user_ids = list(user_ids)
user_ids
def crit(a, b):
	return a - b
user_ids.sort(key=crit)
a = "Zee"
b = "shan"
a += b
a
def encode_hash_component(string: str) -> str:
    """
    Hide URI-encoding by replacing % with .
    [present in zulip/static/js/hash_util.js]
    """
    return quote(string).replace('.', '%2E').replace('%', '.')
a = 123
encode_hash_component(a)
encode_hash_component('zee.shan.com')
encode_hash_component('12345')
s = '/near/' + 1234
s = '/near/' + str(1234)
s
def all_user_ids_in_pm(message: Any) -> Any:
    """
    Returns a sorted list of all user_ids invloved in 
    a private chat, else None
    """
    if (message['type'] != 'private'
        or len(message['display_recipient']) == 0):
        return None
    user_ids = map(lambda x: x['id'], message['display_recipient'])
    user_ids = list(user_ids).sort()
message['display_recipient'] = [{'id': 17719, 'email': 'user17719@chat.zulip.org', 'full_name': 'Zeeshan Equbal', 'is_mirror_dummy': False}, {'email': 'welcome-bot@zulip.com', 'full_name': 'Welcome Bot', 'id': 4, 'is_mirror_dummy': False}]
message = [{'id': 17719, 'email': 'user17719@chat.zulip.org', 'full_name': 'Zeeshan Equbal', 'is_mirror_dummy': False}, {'email': 'welcome-bot@zulip.com', 'full_name': 'Welcome Bot', 'id': 4, 'is_mirror_dummy': False}]
user_ids = map(lambda x : x['id'], message)
print(list(user_ids))
user_ids
user_ids = list(user_ids)
user_ids
user_ids = map(lambda x : x['id'], message)
user_ids
user_ids = list(user_ids)
user_ids
suffix = 'zeeshan'
slug = ','.join(user_ids) + '-' + suffix
slug = ','.join(map(str, user_ids)) + '-' + suffix
slug
quote('/')
quote('/', safe='~()*!.\'')
quote('.', safe='~()*!.\'')
quote('?', safe='~()*!.\'')
quote('\', safe='~()*!.\'')
quote('\\', safe='~()*!.\'')
quote('.', safe='~()*!.\'')
exit()
def hash_util_encode(string: str) -> str:
    """
    Hide URI-encoding by replacing '%' with '.'
    urllib.quote is equivalent to encodeURIComponent in JavaScript.
    Referred from zerver/lib/url_encoding.py
    """
    # `safe` has a default value of "/", but we want those encoded, too.
    return urllib.parse.quote(
        string, safe=b"").replace(".", "%2E").replace("%", ".")
hash_util_encode('zulip terminal')
import urllib
hash_util_encode('zulip terminal')
urllib.parse
urllib.quote('/')
import urllib
def hash_util_encode(string: str) -> str:
    """
    Hide URI-encoding by replacing '%' with '.'
    urllib.quote is equivalent to encodeURIComponent in JavaScript.
    Referred from zerver/lib/url_encoding.py
    """
    # `safe` has a default value of "/", but we want those encoded, too.
    return urllib.parse.quote(
        string, safe=b"").replace(".", "%2E").replace("%", ".")
hash_util_encode('zulip terminal')
exit()
a = [(1,2), (3, 4)]
b = [(5,6)]
a = [b + (1,2), (3, 4)]
a = b + [(1,2), (3, 4)]
a
c = (5, 6)
a = [b + (1,2), (3, 4)]
a = [c + (1,2), (3, 4)]
a
d = [] + [(1, 2)]
d
d = [()] + [(1, 2)]
d
exit()
import tensorflow as tf
print("Num GPUs Available: ", len(tf.config.experimental.list_physical_devices('GPU')))
exit()
a = 2
print('This is a: {}'.format(a))
exit()
from zulipterminal import helper
helper.notify("title", "text")
exit()
from zulipterminal import helper
helper.notify('head', 'body')
exit()
True and False or True
True and False or False
False and False or True
exit()
from collections import OrderedDict
a = OrderedDict([('+1', {'code': '1f44d', 'type': 'unicode_emoji'}), ('-1', {'code': '1f44e', 'type': 'unicode_emoji'}), ('100', {'code': '1f4af', 'type': 'unicode_emoji'}), ('1234', {'code': '1f522', 'type': 'unicode_emoji'}), ('8_ball', {'code': '1f3b1', 'type': 'unicode_emoji'}), ('a', {'code': '1f170', 'type': 'unicode_emoji'}), ('ab', {'code': '1f18e', 'type': 'unicode_emoji'}), ('abc', {'code': '1f524', 'type': 'unicode_emoji'}), ('abcd', {'code': '1f521', 'type': 'unicode_emoji'}), ('accessible', {'code': '267f', 'type': 'unicode_emoji'}), ('accommodations', {'code': '1f6cc', 'type': 'unicode_emoji'}), ('acrobatics', {'code': '1f938', 'type': 'unicode_emoji'}), ('action', {'code': '1f3ac', 'type': 'unicode_emoji'}), ('add', {'code': '2795', 'type': 'unicode_emoji'}), ('aerial_tramway', {'code': '1f6a1', 'type': 'unicode_emoji'}), ('agent', {'code': '1f575', 'type': 'unicode_emoji'})])
assert 'add' in a
print(assert 'add' in a)
print('add' in a)
exit()
def custom_emojis():
    return OrderedDict([
        ('urwid', {'code': '100', 'type': 'realm_emoji'}),
        ('dancing', {'code': '3', 'type': 'realm_emoji'}),
        ('snape', {'code': '20', 'type': 'realm_emoji'}),
        ('joker', {'code': '202020', 'type': 'realm_emoji'}),
        ('zulip', {'code': '12345', 'type': 'realm_emoji'}),
    ])
def unicode_emojis():
    return OrderedDict([
        ('happy', {'code': '1f600', 'type': 'unicode_emoji'}),
        ('joker', {'code': '1f0cf', 'type': 'unicode_emoji'}),
        ('joy_cat', {'code': '1f639', 'type': 'unicode_emoji'}),
        ('rock_on', {'code': '1f918', 'type': 'unicode_emoji'}),
        ('smile', {'code': '263a', 'type': 'unicode_emoji'}),
        ('smiley', {'code': '1f603', 'type': 'unicode_emoji'}),
        ('smirk', {'code': '1f60f', 'type': 'unicode_emoji'}),
    ])
import mock
from zulipterminal import mock
import mocker
exit()
a = ['abc', 'sar', 'zee', 'ade', desx', 'aedf']
a = ['abc', 'sar', 'zee', 'ade', 'desx', 'aedf']
a
b = [name for name in a if 'a' in name]
b
b = [(name for name in a if 'a' in name]
b = [(name for name in a
	if 'a' in name)]
b
b = [name for name in a
 if 'a' in name]
b
exit()
import numpy as np
import cv2
import os, sys
import traceback
import time
import math
##############################################################
# Importing the sim module for Remote API connection with CoppeliaSim
try:
	import sim
	
except Exception:
	print('\n[ERROR] It seems the sim.py OR simConst.py files are not found!')
	print('\n[WARNING] Make sure to have following files in the directory:')
	print('sim.py, simConst.py and appropriate library - remoteApi.dll (if on Windows), remoteApi.so (if on Linux) or remoteApi.dylib (if on Mac).\n')
	sys.exit()
#Import 'task_1b.py' file as module
try:
	import task_1b
except ImportError:
	print('\n[ERROR] task_1b.py file is not present in the current directory.')
	print('Your current directory is: ', os.getcwd())
	print('Make sure task_1b.py is present in this current directory.\n')
	sys.exit()
	
except Exception as e:
	print('Your task_1b.py throwed an Exception. Kindly debug your code!\n')
	traceback.print_exc(file=sys.stdout)
	sys.exit()
# Import 'task_1a_part1.py' file as module
try:
	import task_1a_part1
except ImportError:
	print('\n[ERROR] task_1a_part1.py file is not present in the current directory.')
	print('Your current directory is: ', os.getcwd())
	print('Make sure task_1a_part1.py is present in this current directory.\n')
	sys.exit()
	
except Exception as e:
	print('Your task_1a_part1.py throwed an Exception. Kindly debug your code!\n')
	traceback.print_exc(file=sys.stdout)
	sys.exit()
# Import 'task_2a.py' file as module
try:
	import task_2a
except ImportError:
	print('\n[ERROR] task_2a.py file is not present in the current directory.')
	print('Your current directory is: ', os.getcwd())
	print('Make sure task_2a.py is present in this current directory.\n')
	sys.exit()
	
except Exception as e:
	print('Your task_2a.py throwed an Exception. Kindly debug your code!\n')
	traceback.print_exc(file=sys.stdout)
	sys.exit()
# Import 'task_2b.py' file as module
try:
	import task_2b
except ImportError:
	print('\n[ERROR] task_2b.py file is not present in the current directory.')
	print('Your current directory is: ', os.getcwd())
	print('Make sure task_2b.py is present in this current directory.\n')
	sys.exit()
	
except Exception as e:
	print('Your task_2b.py throwed an Exception. Kindly debug your code!\n')
	traceback.print_exc(file=sys.stdout)
	sys.exit()
# Import 'task_3.py' file as module
try:
	import task_3
except ImportError:
	print('\n[ERROR] task_3.py file is not present in the current directory.')
	print('Your current directory is: ', os.getcwd())
	print('Make sure task_3.py is present in this current directory.\n')
	sys.exit()
	
except Exception as e:
	print('Your task_3.py throwed an Exception. Kindly debug your code!\n')
	traceback.print_exc(file=sys.stdout)
	sys.exit()
# Import 'task_4a.py' file as module
try:
	import task_4a
except ImportError:
	print('\n[ERROR] task_4a.py file is not present in the current directory.')
	print('Your current directory is: ', os.getcwd())
	print('Make sure task_4a.py is present in this current directory.\n')
	sys.exit()
	
except Exception as e:
	print('Your task_4a.py throwed an Exception. Kindly debug your code!\n')
	traceback.print_exc(file=sys.stdout)
	sys.exit()
import task_1b
import task_1a_part1
import task_2a
import task_2b
import task_3
import task_4a
import task_4b
task_4b.calculate_path_from_maze_image('maze_t1.jpg')
task_4b.calculate_path_from_maze_image('./maze_t1.jpg')
os.path.exists(maze_t1.jpg)
os.path.exists('maze_t1.jpg')
task_4b.calculate_path_from_maze_image('maze_t1.jpg')
exit()
a = [1, 2, 3]
print(a[:1])
print(a[:-1])
print(a[2:])
print(a[:2])
exit()
shapes = {'Circle': [['green', 1, 2, 200], ['green', 2, 3, 287], ['green', 5, 3, 11]]}
ball = lambda x : (x[3] <= 400 and x[3] >= 200), shapes['Circle']
ball
ball = filter(lambda x : (x[3] <= 400 and x[3] >= 200), shapes['Circle'])
ball
ball = list(filter(lambda x : (x[3] <= 400 and x[3] >= 200), shapes['Circle']))
ball
exit()
from typing_extension import TypedDict
from typing import TypedDict
class Point2D(TypedDict):
    x: int
    y: int
    label: str
a: Point2D = {'x': 1, 'label': 'hi'}
exit()
a = dict(x=1, y=2, label='first')
a
from typing import TypedDict
class Point2D(TypedDict):
    x: int
    y: int
    label: str
Point2D(a)
b = Point2D(a)
b
exit()
a = "You changed a message's topic."
a
b = f'Hi, {a}'
b
b = 'Hi, {}'.format(a)
b
exit()
st = 'ZeeshanIsAGoodBoy'
ch = [st[i : i + 3] for i in range(0, len(st), 3)]
ch
exit()
st = 'Zee'
ch = [st[i : i + 3] for i in range(0, len(st), 3)]
ch
st = 'Ze'
ch = [st[i : i + 3] for i in range(0, len(st), 3)]
ch
m = "\n".join(ch)
m
st = 'ZeeshanIsAGoodBoy'
ch = [st[i : i + 3] for i in range(0, len(st), 3)]
m = "\n".join(ch)
m
exit()
st = 'foobar-2ga5sgf9638vvf8dug5g6h8ftew4f7uer@bar.com'
n = 20 - (len(st) + 2)
ch = [st[i : i + 3] for i in range(0, len(st), 3)]
ch
ch = [st[i : i + n] for i in range(0, len(st), n)]
ch
st
n
n=30-22
ch = [st[i : i + n] for i in range(0, len(st), n)]
ch
st = 'announce.91657e56b7cd895657eefd.abcd.efgh@zulip.com'
n = 60 - 25
ch = [st[i : i + n] for i in range(0, len(st), n)]
ch
n = 80 - 25
ch = [st[i : i + n] for i in range(0, len(st), n)]
ch
st = 'feedback.38vvf8d1657e57esgf9638.foo.bar@chat.zulip.com'
n = 40 - 30
ch = [st[i : i + n] for i in range(0, len(st), n)]
ch
n = 55 - 30
ch = [st[i : i + n] for i in range(0, len(st), n)]
ch
n = 30
ch = [st[i : i + n] for i in range(0, len(st), n)]
ch
exit()
for _ in range(0, 3):
	print(_)
exit()
a = b = 1
a
b
exit()
a = [('a', 0), ('b', 0), ('c', 3), ('d', 5), ('e', 0), ('f, 1)]
a = [('a', 0), ('b', 0), ('c', 3), ('d', 5), ('e', 0), ('f', 1)]
a
a = sorted(a, key=lambda x: x[1])
a
a = [('a', 0), ('b', 0), ('c', 3), ('d', 5), ('e', 0), ('f', 1)]
b = sorted(a, key=lambda x: x[1])
c = sorted(a, key=lambda x: -x[1])
d = sorted(a, key=lambda x: x[1], reverse=True)
b
c
d
exit()
a = ''
a
if a:
	print('sce')
else:
	print('iuvhi')
exit()
print(time.time())
import time
print(time.time())
def test:
def test():
	print(time.time())
	time.sleep(100)
	print(time.time())
test
test()
def test():
	print(time.time())
	time.sleep(3)
	print(time.time())
test()
exit()
table_4_Kp, table_4_Kd, table_4_Ki = (34, 14.7, 22.9)
table_4_Kp
exit()
a = [1, 2, 3, 4, 5]
a[:3]
exit()
for i in []:
	print("Hi")
for i in [1]:
	print("Hi")
exit()
print "\a"
print "\a",
print("\a")
print("\b")
exit()
a = 'ab'
if 'c' in a:
	print("1")
elif 'b' in a:
	print("2")
else:
	print("3")
{"A" : ['a', 'b']
}
def primary_key_for_command(command: str) -> str:
    """
    Primary Key is the key that will be displayed eg. in the UI
    """
    return keys_for_command(command).pop(0)
primary_key_for_command("A")
def keys_for_command(command: str) -> List[str]:
    """
    Returns the actual keys for a given mapped command
    """
    try:
        return list(KEY_BINDINGS[command]['keys'])
    except KeyError as exception:
        raise InvalidCommand(command)
from typing import List
def keys_for_command(command: str) -> List[str]:
    """
    Returns the actual keys for a given mapped command
    """
    try:
        return list(KEY_BINDINGS[command]['keys'])
    except KeyError as exception:
        raise InvalidCommand(command)
primary_key_for_command("A")
print(['a', 'b'].pop(0))
exit()
from collections import OrderedDict
from typing import List
from typing_extensions import TypedDict
class KeyBinding(TypedDict, total=False):
    keys: List[str]
    help_text: str
    excluded_from_random_tips: bool
    key_category: str
KEY_BINDINGS: 'OrderedDict[str, KeyBinding]' = OrderedDict([
    # Key that is displayed in the UI is determined by the method
    # primary_key_for_command. (Currently the first key in the list)
    ('HELP', {
        'keys': ['?'],
        'help_text': 'Show/hide help menu',
        'excluded_from_random_tips': True,
        'key_category': 'general',
    }),
    ('ABOUT', {
        'keys': ['meta ?'],
        'help_text': 'Show/hide about menu',
        'key_category': 'general',
    }),
    ('GO_BACK', {
        'keys': ['esc'],
        'help_text': 'Go Back',
        'excluded_from_random_tips': False,
        'key_category': 'general',
    }),
    ('OPEN_DRAFT', {
        'keys': ['d'],
        'help_text': 'Open draft message saved in this session',
        'key_category': 'general',
    }),
    ('GO_UP', {
        'keys': ['up', 'k'],
        'help_text': 'Go up / Previous message',
        'key_category': 'navigation',
    }),
    ('GO_DOWN', {
        'keys': ['down', 'j'],
        'help_text': 'Go down / Next message',
        'key_category': 'navigation',
    }),
    ('GO_LEFT', {
        'keys': ['left', 'h'],
        'help_text': 'Go left',
        'key_category': 'navigation',
    }),
    ('GO_RIGHT', {
        'keys': ['right', 'l'],
        'help_text': 'Go right',
        'key_category': 'navigation',
    }),
    ('SCROLL_UP', {
        'keys': ['page up', 'K'],
        'help_text': 'Scroll up',
        'key_category': 'navigation',
    }),
    ('SCROLL_DOWN', {
        'keys': ['page down', 'J'],
        'help_text': 'Scroll down',
        'key_category': 'navigation',
    }),
    ('GO_TO_BOTTOM', {
        'keys': ['end', 'G'],
        'help_text': 'Go to bottom / Last message',
        'key_category': 'navigation',
    }),
    ('REPLY_MESSAGE', {
        'keys': ['r', 'enter'],
        'help_text': 'Reply to the current message',
        'key_category': 'msg_actions',
    }),
    ('MENTION_REPLY', {
        'keys': ['@'],
        'help_text': 'Reply mentioning the sender of the current message',
        'key_category': 'msg_actions',
    }),
    ('QUOTE_REPLY', {
        'keys': ['>'],
        'help_text': 'Reply quoting the current message text',
        'key_category': 'msg_actions',
    }),
    ('REPLY_AUTHOR', {
        'keys': ['R'],
        'help_text': 'Reply privately to the sender of the current message',
        'key_category': 'msg_actions',
    }),
    ('EDIT_MESSAGE', {
        'keys': ['e'],
        'help_text': "Edit message's content or topic",
        'key_category': 'msg_actions'
    }),
    ('STREAM_MESSAGE', {
        'keys': ['c'],
        'help_text': 'New message to a stream',
        'key_category': 'msg_actions',
    }),
    ('PRIVATE_MESSAGE', {
        'keys': ['x'],
        'help_text': 'New message to a person or group of people',
        'key_category': 'msg_actions',
    }),
    ('CYCLE_COMPOSE_FOCUS', {
        'keys': ['tab'],
        'help_text': 'Cycle through recipient and content boxes',
        'key_category': 'msg_compose',
    }),
    ('SEND_MESSAGE', {
        'keys': ['ctrl d', 'meta enter'],
        'help_text': 'Send a message',
        'key_category': 'msg_compose',
    }),
    ('SAVE_AS_DRAFT', {
        'keys': ['meta s'],
        'help_text': 'Save current message as a draft',
        'key_category': 'msg_compose',
    }),
    ('AUTOCOMPLETE', {
        'keys': ['ctrl f'],
        'help_text': ('Autocomplete @mentions, #stream_names, :emoji:'
                      ' and topics'),
        'key_category': 'msg_compose',
    }),
    ('AUTOCOMPLETE_REVERSE', {
        'keys': ['ctrl r'],
        'help_text': 'Cycle through autocomplete suggestions in reverse',
        'key_category': 'msg_compose',
    }),
    ('STREAM_NARROW', {
        'keys': ['s'],
        'help_text': 'Narrow to the stream of the current message',
        'key_category': 'msg_actions',
    }),
    ('TOPIC_NARROW', {
        'keys': ['S'],
        'help_text': 'Narrow to the topic of the current message',
        'key_category': 'msg_actions',
    }),
    ('TOGGLE_NARROW', {
        'keys': ['z'],
        'help_text':
            'Narrow to a topic/private-chat, or stream/all-private-messages',
        'key_category': 'msg_actions',
    }),
    ('TOGGLE_TOPIC', {
        'keys': ['t'],
        'help_text': 'Toggle topics in a stream',
        'key_category': 'stream_list',
    }),
    ('ALL_MESSAGES', {
        'keys': ['a', 'esc'],
        'help_text': 'Narrow to all messages',
        'key_category': 'navigation',
    }),
    ('ALL_PM', {
        'keys': ['P'],
        'help_text': 'Narrow to all private messages',
        'key_category': 'navigation',
    }),
    ('ALL_STARRED', {
        'keys': ['f'],
        'help_text': 'Narrow to all starred messages',
        'key_category': 'navigation',
    }),
    ('ALL_MENTIONS', {
        'keys': ['#'],
        'help_text': "Narrow to messages in which you're mentioned",
        'key_category': 'navigation',
    }),
    ('NEXT_UNREAD_TOPIC', {
        'keys': ['n'],
        'help_text': 'Next unread topic',
        'key_category': 'navigation',
    }),
    ('NEXT_UNREAD_PM', {
        'keys': ['p'],
        'help_text': 'Next unread private message',
        'key_category': 'navigation',
    }),
    ('SEARCH_PEOPLE', {
        'keys': ['w'],
        'help_text': 'Search Users',
        'key_category': 'searching',
    }),
    ('SEARCH_MESSAGES', {
        'keys': ['/'],
        'help_text': 'Search Messages',
        'key_category': 'searching',
    }),
    ('SEARCH_STREAMS', {
        'keys': ['q'],
        'help_text': 'Search Streams',
        'key_category': 'searching',
    }),
    ('SEARCH_TOPICS', {
        'keys': ['q'],
        'help_text': 'Search topics in a stream',
        'key_category': 'searching',
    }),
    ('TOGGLE_MUTE_STREAM', {
        'keys': ['m'],
        'help_text': 'Mute/unmute Streams',
        'key_category': 'stream_list',
    }),
    ('ENTER', {
        'keys': ['enter'],
        'help_text': 'Perform current action',
        'key_category': 'navigation',
    }),
    ('THUMBS_UP', {
        'keys': ['+'],
        'help_text': 'Add/remove thumbs-up reaction to the current message',
        'key_category': 'msg_actions',
    }),
    ('TOGGLE_STAR_STATUS', {
        'keys': ['ctrl s', '*'],
        'help_text': 'Add/remove star status of the current message',
        'key_category': 'msg_actions',
    }),
    ('MSG_INFO', {
        'keys': ['i'],
        'help_text': 'Show/hide message information',
        'key_category': 'msg_actions',
    }),
    ('EDIT_HISTORY', {
        'keys': ['e'],
        'help_text': 'Show/hide edit history (from message information)',
        'excluded_from_random_tips': True,
        'key_category': 'msg_actions',
    }),
    ('STREAM_DESC', {
        'keys': ['i'],
        'help_text': 'Show/hide stream information & modify settings',
        'key_category': 'stream_list',
    }),
    ('STREAM_MEMBERS', {
        'keys': ['m'],
        'help_text': 'Show/hide stream members (from stream information)',
        'excluded_from_random_tips': True,
        'key_category': 'stream_list',
    }),
    ('REDRAW', {
        'keys': ['ctrl l'],
        'help_text': 'Redraw screen',
        'key_category': 'general',
    }),
    ('QUIT', {
        'keys': ['ctrl c'],
        'help_text': 'Quit',
        'key_category': 'general',
    }),
    ('BEGINNING_OF_LINE', {
        'keys': ['ctrl a'],
        'help_text': 'Jump to the beginning of line',
        'key_category': 'msg_compose',
    }),
    ('END_OF_LINE', {
        'keys': ['ctrl e'],
        'help_text': 'Jump to the end of line',
        'key_category': 'msg_compose',
    }),
    ('ONE_WORD_BACKWARD', {
        'keys': ['meta b'],
        'help_text': 'Jump backward one word',
        'key_category': 'msg_compose',
    }),
    ('ONE_WORD_FORWARD', {
        'keys': ['meta f'],
        'help_text': 'Jump forward one word',
        'key_category': 'msg_compose',
    }),
    ('DELETE_LAST_CHARACTER', {
        'keys': ['ctrl h'],
        'help_text': 'Delete previous character (to left)',
        'key_category': 'msg_compose',
    }),
    ('TRANSPOSE_CHARACTERS', {
        'keys': ['ctrl t'],
        'help_text': 'Transpose characters',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_END_OF_LINE', {
        'keys': ['ctrl k'],
        'help_text': 'Cut forwards to the end of the line',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_START_OF_LINE', {
        'keys': ['ctrl u'],
        'help_text': 'Cut backwards to the start of the line',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_END_OF_WORD', {
        'keys': ['meta d'],
        'help_text': 'Cut forwards to the end of the current word',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_START_OF_WORD', {
        'keys': ['ctrl w'],
        'help_text': 'Cut backwards to the start of the current word',
        'key_category': 'msg_compose',
    }),
    ('PASTE_LAST_CUT', {
        'keys': ['ctrl y'],
        'help_text': 'Paste last cut section',
        'key_category': 'msg_compose',
    }),
    ('UNDO_LAST_ACTION', {
        'keys': ['ctrl _'],
        'help_text': 'Undo last action',
        'key_category': 'msg_compose',
    }),
    ('PREV_LINE', {
        'keys': ['up', 'ctrl p'],
        'help_text': 'Jump to the previous line',
        'key_category': 'msg_compose',
    }),
    ('NEXT_LINE', {
        'keys': ['down', 'ctrl n'],
        'help_text': 'Jump to the next line',
        'key_category': 'msg_compose',
    }),
    ('CLEAR_MESSAGE', {
        'keys': ['ctrl l'],
        'help_text': 'Clear compose box',
        'key_category': 'msg_compose',
    }),
])
HELP_CATEGORIES = OrderedDict([
    ('general', 'General'),
    ('navigation', 'Navigation'),
    ('searching', 'Searching'),
    ('msg_actions', 'Message actions'),
    ('stream_list', 'Stream list actions'),
    ('msg_compose', 'Composing a Message'),
])
DIRECTIONAL_COMMANDS = [
    'GO_UP', 'GO_RIGHT', 'GO_LEFT', 'GO_DOWN'
]
class InvalidCommand(Exception):
    pass
def is_command_key(command: str, key: str) -> bool:
    """
    Returns the mapped binding for a key if mapped
    or the key otherwise.
    """
    try:
        return key in KEY_BINDINGS[command]['keys']
    except KeyError as exception:
        raise InvalidCommand(command)
def keys_for_command(command: str) -> List[str]:
    """
    Returns the actual keys for a given mapped command
    """
    try:
        return list(KEY_BINDINGS[command]['keys'])
    except KeyError as exception:
        raise InvalidCommand(command)
def primary_key_for_command(command: str) -> str:
    """
    Primary Key is the key that will be displayed eg. in the UI
    """
    return keys_for_command(command).pop(0)
def commands_for_random_tips() -> List[KeyBinding]:
    """
    Return list of commands which may be displayed as a random tip
    """
    return [key_binding for key_binding in KEY_BINDINGS.values()
            if not key_binding.get('excluded_from_random_tips', False)]
def is_primary_direction_key(key: str) -> bool:
    """
    Returns True of the key is one of the directional keys.
    """
    return key in [primary_key_for_command(command)
                   for command in DIRECTIONAL_COMMANDS]
is_primary_direction_key('right')
is_primary_direction_key('left')
is_primary_direction_key('top')
is_primary_direction_key('up')
is_primary_direction_key('down')
is_primary_direction_key('bottom')
is_primary_direction_key('esc')
exit()
from collections import OrderedDict
from typing import List
from typing_extensions import TypedDict
class KeyBinding(TypedDict, total=False):
    keys: List[str]
    help_text: str
    excluded_from_random_tips: bool
    key_category: str
KEY_BINDINGS: 'OrderedDict[str, KeyBinding]' = OrderedDict([
    # Key that is displayed in the UI is determined by the method
    # primary_key_for_command. (Currently the first key in the list)
    ('HELP', {
        'keys': ['?'],
        'help_text': 'Show/hide help menu',
        'excluded_from_random_tips': True,
        'key_category': 'general',
    }),
    ('ABOUT', {
        'keys': ['meta ?'],
        'help_text': 'Show/hide about menu',
        'key_category': 'general',
    }),
    ('GO_BACK', {
        'keys': ['esc'],
        'help_text': 'Go Back',
        'excluded_from_random_tips': False,
        'key_category': 'general',
    }),
    ('OPEN_DRAFT', {
        'keys': ['d'],
        'help_text': 'Open draft message saved in this session',
        'key_category': 'general',
    }),
    ('GO_UP', {
        'keys': ['up', 'k'],
        'help_text': 'Go up / Previous message',
        'key_category': 'navigation',
    }),
    ('GO_DOWN', {
        'keys': ['down', 'j'],
        'help_text': 'Go down / Next message',
        'key_category': 'navigation',
    }),
    ('GO_LEFT', {
        'keys': ['left', 'h'],
        'help_text': 'Go left',
        'key_category': 'navigation',
    }),
    ('GO_RIGHT', {
        'keys': ['right', 'l'],
        'help_text': 'Go right',
        'key_category': 'navigation',
    }),
    ('SCROLL_UP', {
        'keys': ['page up', 'K'],
        'help_text': 'Scroll up',
        'key_category': 'navigation',
    }),
    ('SCROLL_DOWN', {
        'keys': ['page down', 'J'],
        'help_text': 'Scroll down',
        'key_category': 'navigation',
    }),
    ('GO_TO_BOTTOM', {
        'keys': ['end', 'G'],
        'help_text': 'Go to bottom / Last message',
        'key_category': 'navigation',
    }),
    ('REPLY_MESSAGE', {
        'keys': ['r', 'enter'],
        'help_text': 'Reply to the current message',
        'key_category': 'msg_actions',
    }),
    ('MENTION_REPLY', {
        'keys': ['@'],
        'help_text': 'Reply mentioning the sender of the current message',
        'key_category': 'msg_actions',
    }),
    ('QUOTE_REPLY', {
        'keys': ['>'],
        'help_text': 'Reply quoting the current message text',
        'key_category': 'msg_actions',
    }),
    ('REPLY_AUTHOR', {
        'keys': ['R'],
        'help_text': 'Reply privately to the sender of the current message',
        'key_category': 'msg_actions',
    }),
    ('EDIT_MESSAGE', {
        'keys': ['e'],
        'help_text': "Edit message's content or topic",
        'key_category': 'msg_actions'
    }),
    ('STREAM_MESSAGE', {
        'keys': ['c'],
        'help_text': 'New message to a stream',
        'key_category': 'msg_actions',
    }),
    ('PRIVATE_MESSAGE', {
        'keys': ['x'],
        'help_text': 'New message to a person or group of people',
        'key_category': 'msg_actions',
    }),
    ('CYCLE_COMPOSE_FOCUS', {
        'keys': ['tab'],
        'help_text': 'Cycle through recipient and content boxes',
        'key_category': 'msg_compose',
    }),
    ('SEND_MESSAGE', {
        'keys': ['ctrl d', 'meta enter'],
        'help_text': 'Send a message',
        'key_category': 'msg_compose',
    }),
    ('SAVE_AS_DRAFT', {
        'keys': ['meta s'],
        'help_text': 'Save current message as a draft',
        'key_category': 'msg_compose',
    }),
    ('AUTOCOMPLETE', {
        'keys': ['ctrl f'],
        'help_text': ('Autocomplete @mentions, #stream_names, :emoji:'
                      ' and topics'),
        'key_category': 'msg_compose',
    }),
    ('AUTOCOMPLETE_REVERSE', {
        'keys': ['ctrl r'],
        'help_text': 'Cycle through autocomplete suggestions in reverse',
        'key_category': 'msg_compose',
    }),
    ('STREAM_NARROW', {
        'keys': ['s'],
        'help_text': 'Narrow to the stream of the current message',
        'key_category': 'msg_actions',
    }),
    ('TOPIC_NARROW', {
        'keys': ['S'],
        'help_text': 'Narrow to the topic of the current message',
        'key_category': 'msg_actions',
    }),
    ('TOGGLE_NARROW', {
        'keys': ['z'],
        'help_text':
            'Narrow to a topic/private-chat, or stream/all-private-messages',
        'key_category': 'msg_actions',
    }),
    ('TOGGLE_TOPIC', {
        'keys': ['t'],
        'help_text': 'Toggle topics in a stream',
        'key_category': 'stream_list',
    }),
    ('ALL_MESSAGES', {
        'keys': ['a', 'esc'],
        'help_text': 'Narrow to all messages',
        'key_category': 'navigation',
    }),
    ('ALL_PM', {
        'keys': ['P'],
        'help_text': 'Narrow to all private messages',
        'key_category': 'navigation',
    }),
    ('ALL_STARRED', {
        'keys': ['f'],
        'help_text': 'Narrow to all starred messages',
        'key_category': 'navigation',
    }),
    ('ALL_MENTIONS', {
        'keys': ['#'],
        'help_text': "Narrow to messages in which you're mentioned",
        'key_category': 'navigation',
    }),
    ('NEXT_UNREAD_TOPIC', {
        'keys': ['n'],
        'help_text': 'Next unread topic',
        'key_category': 'navigation',
    }),
    ('NEXT_UNREAD_PM', {
        'keys': ['p'],
        'help_text': 'Next unread private message',
        'key_category': 'navigation',
    }),
    ('SEARCH_PEOPLE', {
        'keys': ['w'],
        'help_text': 'Search Users',
        'key_category': 'searching',
    }),
    ('SEARCH_MESSAGES', {
        'keys': ['/'],
        'help_text': 'Search Messages',
        'key_category': 'searching',
    }),
    ('SEARCH_STREAMS', {
        'keys': ['q'],
        'help_text': 'Search Streams',
        'key_category': 'searching',
    }),
    ('SEARCH_TOPICS', {
        'keys': ['q'],
        'help_text': 'Search topics in a stream',
        'key_category': 'searching',
    }),
    ('TOGGLE_MUTE_STREAM', {
        'keys': ['m'],
        'help_text': 'Mute/unmute Streams',
        'key_category': 'stream_list',
    }),
    ('ENTER', {
        'keys': ['enter'],
        'help_text': 'Perform current action',
        'key_category': 'navigation',
    }),
    ('THUMBS_UP', {
        'keys': ['+'],
        'help_text': 'Add/remove thumbs-up reaction to the current message',
        'key_category': 'msg_actions',
    }),
    ('TOGGLE_STAR_STATUS', {
        'keys': ['ctrl s', '*'],
        'help_text': 'Add/remove star status of the current message',
        'key_category': 'msg_actions',
    }),
    ('MSG_INFO', {
        'keys': ['i'],
        'help_text': 'Show/hide message information',
        'key_category': 'msg_actions',
    }),
    ('EDIT_HISTORY', {
        'keys': ['e'],
        'help_text': 'Show/hide edit history (from message information)',
        'excluded_from_random_tips': True,
        'key_category': 'msg_actions',
    }),
    ('STREAM_DESC', {
        'keys': ['i'],
        'help_text': 'Show/hide stream information & modify settings',
        'key_category': 'stream_list',
    }),
    ('STREAM_MEMBERS', {
        'keys': ['m'],
        'help_text': 'Show/hide stream members (from stream information)',
        'excluded_from_random_tips': True,
        'key_category': 'stream_list',
    }),
    ('REDRAW', {
        'keys': ['ctrl l'],
        'help_text': 'Redraw screen',
        'key_category': 'general',
    }),
    ('QUIT', {
        'keys': ['ctrl c'],
        'help_text': 'Quit',
        'key_category': 'general',
    }),
    ('BEGINNING_OF_LINE', {
        'keys': ['ctrl a'],
        'help_text': 'Jump to the beginning of line',
        'key_category': 'msg_compose',
    }),
    ('END_OF_LINE', {
        'keys': ['ctrl e'],
        'help_text': 'Jump to the end of line',
        'key_category': 'msg_compose',
    }),
    ('ONE_WORD_BACKWARD', {
        'keys': ['meta b'],
        'help_text': 'Jump backward one word',
        'key_category': 'msg_compose',
    }),
    ('ONE_WORD_FORWARD', {
        'keys': ['meta f'],
        'help_text': 'Jump forward one word',
        'key_category': 'msg_compose',
    }),
    ('DELETE_LAST_CHARACTER', {
        'keys': ['ctrl h'],
        'help_text': 'Delete previous character (to left)',
        'key_category': 'msg_compose',
    }),
    ('TRANSPOSE_CHARACTERS', {
        'keys': ['ctrl t'],
        'help_text': 'Transpose characters',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_END_OF_LINE', {
        'keys': ['ctrl k'],
        'help_text': 'Cut forwards to the end of the line',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_START_OF_LINE', {
        'keys': ['ctrl u'],
        'help_text': 'Cut backwards to the start of the line',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_END_OF_WORD', {
        'keys': ['meta d'],
        'help_text': 'Cut forwards to the end of the current word',
        'key_category': 'msg_compose',
    }),
    ('CUT_TO_START_OF_WORD', {
        'keys': ['ctrl w'],
        'help_text': 'Cut backwards to the start of the current word',
        'key_category': 'msg_compose',
    }),
    ('PASTE_LAST_CUT', {
        'keys': ['ctrl y'],
        'help_text': 'Paste last cut section',
        'key_category': 'msg_compose',
    }),
    ('UNDO_LAST_ACTION', {
        'keys': ['ctrl _'],
        'help_text': 'Undo last action',
        'key_category': 'msg_compose',
    }),
    ('PREV_LINE', {
        'keys': ['up', 'ctrl p'],
        'help_text': 'Jump to the previous line',
        'key_category': 'msg_compose',
    }),
    ('NEXT_LINE', {
        'keys': ['down', 'ctrl n'],
        'help_text': 'Jump to the next line',
        'key_category': 'msg_compose',
    }),
    ('CLEAR_MESSAGE', {
        'keys': ['ctrl l'],
        'help_text': 'Clear compose box',
        'key_category': 'msg_compose',
    }),
])
HELP_CATEGORIES = OrderedDict([
    ('general', 'General'),
    ('navigation', 'Navigation'),
    ('searching', 'Searching'),
    ('msg_actions', 'Message actions'),
    ('stream_list', 'Stream list actions'),
    ('msg_compose', 'Composing a Message'),
])
DIRECTIONAL_COMMANDS = [
    'GO_UP', 'GO_RIGHT', 'GO_LEFT', 'GO_DOWN'
]
class InvalidCommand(Exception):
    pass
def is_command_key(command: str, key: str) -> bool:
    """
    Returns the mapped binding for a key if mapped
    or the key otherwise.
    """
    try:
        return key in KEY_BINDINGS[command]['keys']
    except KeyError as exception:
        raise InvalidCommand(command)
def keys_for_command(command: str) -> List[str]:
    """
    Returns the actual keys for a given mapped command
    """
    try:
        return list(KEY_BINDINGS[command]['keys'])
    except KeyError as exception:
        raise InvalidCommand(command)
def primary_key_for_command(command: str) -> str:
    """
    Primary Key is the key that will be displayed eg. in the UI
    """
    return keys_for_command(command).pop(0)
def commands_for_random_tips() -> List[KeyBinding]:
    """
    Return list of commands which may be displayed as a random tip
    """
    return [key_binding for key_binding in KEY_BINDINGS.values()
            if not key_binding.get('excluded_from_random_tips', False)]
def is_primary_direction_key(key: str) -> bool:
    """
    Returns True if the key is one of the directional keys
    else False.
    """
    return key in [primary_key_for_command(command)
                   for command in DIRECTIONAL_COMMANDS]
USED_KEYS = {key
             for values in keys.KEY_BINDINGS.values()
             for key in values['keys']}
exit()
'right' in ['right, 'down']
'right' in ['right', 'down']
exit()
a = ['a', 'b']
a.pop(0)
exit()
a = ''
b = (None, a)
b
exit()
a = [1, 2]
a.append(3, 4)
a.append([3, 4])
a
HORIZONTAL_RULE_LINE = '─'
import urwid
def markup2widgets(self, markup: Any) -> List[Any]:
    widget_list = []
    starting_index = 0
    for index, part in enumerate(markup):
        if part == 'horiz-ruler':
            widget_list.extend([
                urwid.Text(markup[starting_index: index]),
                urwid.Divider(HORIZONTAL_RULE_LINE)])
            starting_index = index
    if markup[starting_index:]:
        widget_list.append(
            urwid.Text(markup[starting_index:]))
    return widget_list
import Typing
import typing
def markup2widgets(self, markup: Any) -> List[Any]:
    widget_list = []
    starting_index = 0
    for index, part in enumerate(markup):
        if part == 'horiz-ruler':
            widget_list.extend([
                urwid.Text(markup[starting_index: index]),
                urwid.Divider(HORIZONTAL_RULE_LINE)])
            starting_index = index
    if markup[starting_index:]:
        widget_list.append(
            urwid.Text(markup[starting_index:]))
    return widget_list
def markup2widgets(self, markup):
    widget_list = []
    starting_index = 0
    for index, part in enumerate(markup):
        if part == 'horiz-ruler':
            widget_list.extend([
                urwid.Text(markup[starting_index: index]),
                urwid.Divider(HORIZONTAL_RULE_LINE)])
            starting_index = index
    if markup[starting_index:]:
        widget_list.append(
            urwid.Text(markup[starting_index:]))
    return widget_list
markup = ['', '', 'Hello', '\n', 'horiz-rule', '\n', 'horiz-rule']
markup2widgets(markup)
def markup2widgets(markup):
    widget_list = []
    starting_index = 0
    for index, part in enumerate(markup):
        if part == 'horiz-ruler':
            widget_list.extend([
                urwid.Text(markup[starting_index: index]),
                urwid.Divider(HORIZONTAL_RULE_LINE)])
            starting_index = index
    if markup[starting_index:]:
        widget_list.append(
            urwid.Text(markup[starting_index:]))
    return widget_list
markup2widgets(markup)
markup = ['', '', 'Hello', '\n', 'horiz-ruler', '\n', 'horiz-ruler']
markup2widgets(markup)
exit()
import od
import os
os.getenv('TWITTER_CONSUMER_KEY')
print(os.getenv('TWITTER_CONSUMER_KEY'))
import os
os.path.curdir
os.path.abspath()
os.path.expanduser('.')
print("\033c")
a = 10
b = a
a = 12
b
a = [1, 2]
a[0] = 3
a = [1, 2]
b = a
a[0] = 3
b
a = [1, 2, 3, 4, 5]
a[i] = v * 2 for i, v in enumerate(a) if (v and 1)
from bs4 import BeautifulSoup
s = BeautifulSoup(<span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>t</mi><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\int_a^b f(t)\, dt = F(b) - F(a)</annotation></semantics></math></span><span aria-hidden="true" class="katex-html"><span class="base"><span class="strut" style="height:2.5109580000000005em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></span>, 'lxml')
s = BeautifulSoup("<span class="katex-display"><span class="katex"><span class="katex-mathml"><math display="block" xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mtext> </mtext><mi>d</mi><mi>t</mi><mo>=</mo><mi>F</mi><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><mi>F</mi><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\int_a^b f(t)\, dt = F(b) - F(a)</annotation></semantics></math></span><span aria-hidden="true" class="katex-html"><span class="base"><span class="strut" style="height:2.5109580000000005em;vertical-align:-0.9119499999999999em;"></span><span class="mop"><span class="mop op-symbol large-op" style="margin-right:0.44445em;position:relative;top:-0.0011249999999999316em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.5990080000000004em;"><span style="top:-1.7880500000000001em;margin-left:-0.44445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">a</span></span></span><span style="top:-3.812900000000001em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.9119499999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">d</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span></span></span></span></span>", 'lxml')
from playsound import playsound
playsound('https://chat.zulip.org/static/audio/notification_sounds/bink.ogg')
from playsound import playsound
playsound('https://chat.zulip.org/static/audio/notification_sounds/bink.ogg')
a = []
if a:
	print("dec")
else:
	print("sdc")
from playsound import playsound
playsound('~/Downloads/bright.ogg')
from playsound import playsound
playsound('~/Downloads/bright.ogg')
print("\a")
import zulip
import logging
stream = zulip.ZulipStream(type="stream", to=["support"], subject="your subject")
logger = logging.getLogger("your_logger")
logger.addHandler(logging.StreamHandler(stream))
logger.setLevel(logging.DEBUG)
stream = zulip.ZulipStream(config="/home/zean/zuliprc-test/zuliprc-aaron", type="stream", to=["support"], subject="your subject")
a = {1: 2, 2: 3, 4: 5}
b = a.get(3, 4)
b
a = 'http://localhost:9991/#narrow/stream/5-Verona/topic/FIRStdfh'
len(a)
def abc(**kwargs):
	if kwargs.a:
		print(kwargs.a)
abc(b='a', a='b')
def abc(**kwargs):
	print(kwargs.get('a'))
abc(a='fvf', b='vgbf')
def abc(**kwargs):
	print(kwargs.get('a'))
	kwargs.set('a', 'dsvdc')
	print(kwargs.get('a'))
abc(a='fvf', b='vgbf')
a = {'a': 1, 'b': 2, 'c': 3}
a
d = a['b']
d
d = 1
a
import webbrowser
webbrowser.get()
import os
os.environ.get('DISPLAY')
a = 'vfidjvkdvlkddknlvkdcdeifvefiaehfi auehfiahefuihefieifhefheid'
len(a)
a = 'a'
print(a * 1000)
print(a * 10000)
a = 'a'
print(a*10000 + 'bbb')
a = 'announceaaaaaaaaaaaaaaaaaaaaaa'
len(a)
b = 'jsdcdvjdfnvjkdvsdjkvnkdscvsdvnioevhdflkvlfndvidfjvblklfbkfdz'
len(b)
a = {}
if not a:
	print('aa')
abc = 'dcdc'
repr(abc)
a = 'a'
print(a * 10000)
expected_complete_themes = {
    'zt_dark', 'gruvbox_dark', 'gruvbox_dark24', 'zt_light', 'zt_blue',
}
expected_complete_themes
type(expected_complete_themes)
a = "2**24"
b = int(a)
b = eval(a)
b
2**24
a = {}
if a:
	print("sscsac")
else:
	print("sdcsc")
b = {'dc': 1, 'scvvv': 'sdcsc'}
b.update(a)
b
import Mocker
import pytest
mock = Mocker()
import pytest
mock = Mock()
mock = mocker.Mock()
from collections import OrderedDict, defaultdict
stream_msg_template = {
    'id': 537286,
    'sender_full_name': 'Foo Foo',
    'timestamp': 1520918722,
    'client': 'website',
    'recipient_id': 6076,
    'sender_email': 'foo@zulip.com',
    'type': 'stream',
    'sender_realm_str': '',
    'flags': ['read'],
    'sender_id': 5140,
    'content_type': 'text/x-markdown',
    'stream_id': 205,
    'subject': 'Test',
    'reactions': [],
    'subject_links': [],
    'avatar_url': 'dummy_avatar_url',
    'is_me_message': False,
    'sender_short_name': 'foo',
    'content': 'Stream content here.',
    'display_recipient': 'PTEST',
}
extra_stream_msg_template = {
    'id': 537285,
    'sender_full_name': 'Bar Bar',
    'timestamp': 1520918722,
    'client': 'website',
    'recipient_id': 6076,
    'sender_email': 'bar@zulip.com',
    'type': 'stream',
    'sender_realm_str': '',
    'flags': ['read'],
    'sender_id': 5140,
    'content_type': 'text/x-markdown',
    'stream_id': 205,
    'subject': 'Test',
    'reactions': [],
    'subject_links': [],
    'avatar_url': 'dummy_avatar_url',
    'is_me_message': False,
    'sender_short_name': 'boo',
    'content': 'Extra Stream content here.',
    'display_recipient': 'PTEST',
}
pm_template = {
    'id': 537287,
    'sender_full_name': 'Foo Foo',
    'timestamp': 1520918736,
    'client': 'website',
    'recipient_id': 5780,
    'is_me_message': False,
    'sender_email': 'foo@zulip.com',
    'flags': ['read'],
    'sender_id': 5140,
    'content_type': 'text/x-markdown',
    'sender_realm_str': '',
    'subject': '',
    'reactions': [],
    'type': 'private',
    'avatar_url': 'dummy_avatar_url',
    'subject_links': [],
    'sender_short_name': 'foo',
    'content': 'Hey PM content here.',
    'display_recipient': [{
        'id': 5179,
        'is_mirror_dummy': False,
        'full_name': 'Boo Boo',
        'short_name': 'boo',
        'email': 'boo@zulip.com',
    }, {
        'short_name': 'foo',
        'id': 5140,
        'is_mirror_dummy': False,
        'full_name': 'Foo Foo',
        'email': 'foo@zulip.com',
    }],
}
group_pm_template = {
    'id': 537288,
    'sender_full_name': 'Foo Foo',
    'timestamp': 1520918737,
    'client': 'website',
    'recipient_id': 5780,  # FIXME Unsure
    'is_me_message': False,
    'sender_email': 'foo@zulip.com',
    'flags': ['read'],
    'sender_id': 5140,
    'content_type': 'text/x-markdown',
    'sender_realm_str': '',
    'subject': '',
    'reactions': [],
    'type': 'private',
    'avatar_url': 'dummy_avatar_url',
    'subject_links': [],
    'sender_short_name': 'foo',
    'content': 'Hey PM content here again.',
    'display_recipient': [{
        'id': 5179,
        'is_mirror_dummy': False,
        'full_name': 'Boo Boo',
        'short_name': 'boo',
        'email': 'boo@zulip.com',
    }, {
        'short_name': 'foo',
        'id': 5140,
        'is_mirror_dummy': False,
        'full_name': 'Foo Foo',
        'email': 'foo@zulip.com',
    }, {
        'short_name': 'bar',
        'id': 5180,
        'is_mirror_dummy': False,
        'full_name': 'Bar Bar',
        'email': 'bar@zulip.com',
    }],
}
from copy import deepcopy
def empty_index():
    return deepcopy({
        'pointer': defaultdict(set, {}),
        'all_msg_ids':  set(),
        'starred_msg_ids': set(),
        'mentioned_msg_ids': set(),
        'private_msg_ids': set(),
        'private_msg_ids_by_user_ids': defaultdict(set, {}),
        'stream_msg_ids_by_stream_id': defaultdict(set, {}),
        'topic_msg_ids': defaultdict(dict, {}),
        'edited_messages': set(),
        'topics': defaultdict(list),
        'search': set(),
        'messages': defaultdict(dict, {
            stream_msg_template['id']: stream_msg_template,
            pm_template['id']: pm_template,
         
def empty_index():
    return deepcopy({
        'pointer': defaultdict(set, {}),
        'all_msg_ids':  set(),
        'starred_msg_ids': set(),
        'mentioned_msg_ids': set(),
        'private_msg_ids': set(),
        'private_msg_ids_by_user_ids': defaultdict(set, {}),
        'stream_msg_ids_by_stream_id': defaultdict(set, {}),
        'topic_msg_ids': defaultdict(dict, {}),
        'edited_messages': set(),
        'topics': defaultdict(list),
        'search': set(),
        'messages': defaultdict(dict, {
            stream_msg_template['id']: stream_msg_template,
            pm_template['id']: pm_template,
            group_pm_template['id']: group_pm_template,
        })
    })
def index_multiple_msg_topic(empty_index):
    """
    Index of initial_data with multiple message when
    model.narrow = [['stream', '7'], ['topic', 'Test']]
    """
    empty_index_multiple_topic_msg = empty_index['messages'].update({
        extra_stream_msg_template['id']: extra_stream_msg_template
    })
    diff = {'topic_msg_ids': defaultdict(dict, {205: {'Test': {
        537285, 537286}}})}
    return dict(empty_index_multiple_topic_msg, **diff)
index_multiple_msg_topic
index_multiple_msg_topic(empty_index())
empty = empty_index()
empty
index_multiple_msg_topic(empty)
empty['messages'].update({extra_stream_msg_template['id']: extra_stream_msg_template})
empty
empty['messages']
empty['topic_msg_ids']
from copy import deepcopy
deepcopy.__doc__
deepcopy.__doc__()
def abc():
	print("abc")
abc().__doc__
abc.__doc__
help(abc)
abc.__doc__ = "This is docstring"
abc.__doc__
help(abc)
def abc():
	return {
		'a': 1
	} if True else 1
abc()
[print(a, b) for a, b in {(1, 2), (3, 4)}]
def abc(a, b):
	return {a: b}
d = [abc(a, b) for a, b in {(1, 2), (3, 4)}]
d
def abc():
	print('abc')
def def():
def cde():
	abc()
	print('cde')
cde()
import pytest
@pytest.fixture
def abc():
	return "abc"
@pytest.fixture
def xyz(abc):
	a = abc()
	return a + "xyz"
xyz()
def test(xyz):
	print(xyz())
test()
test(xyz)
def test(abc):
	return abc()
test()
test(abc)
@pytest.fixture
def my_fixture():
  def _method(a, b):
    return a*b
  return _method
@pytest.fixture
def abc_fixture():
def test(abc):
	a = abc()
	assert a == 'abc'
test(abc)
a = "foobar"
a.startswith("foo")
assert a.startswith("foo")
assert not a.startswith("foo")
import pytest
@pytest.fixture()
def foo():
    return "foo"
@pytest.fixture()
def boo(foo):
    return foo + "boo"
@pytest.fixture()
def bar(foo):
    return foo + "bar"
@pytest.fixture(params=['boo', 'bar'], ids=["boo_fixture", "bar_fixture"])
def final_fixture(request):
    return request.getfixturevalue(request.param)
def _test(final_fixture):
    assert final_fixture.startswith('foo')
_test()
_test(final_fixture)
from datetime import datetime
datetime(142726398)
datetime.now()
datetime.timestamp(18687339847)
datetime.timestamp('18687339847')
datetime.fromtimestamp('18687339847')
datetime.fromtimestamp(18687339847)
